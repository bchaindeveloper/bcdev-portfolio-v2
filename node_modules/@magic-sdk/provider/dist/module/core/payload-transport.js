var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { MagicIncomingWindowMessage, } from '@magic-sdk/types';
import { JsonRpcResponse } from './json-rpc';
import { createAutoCatchingPromise } from '../util/promise-tools';
/**
 * Get the originating payload from a batch request using the specified `id`.
 */
function getRequestPayloadFromBatch(requestPayload, id) {
    return id && Array.isArray(requestPayload)
        ? requestPayload.find(function (p) { return p.id === id; })
        : requestPayload;
}
/**
 * Ensures the incoming response follows the expected schema and parses for a
 * JSON RPC payload ID.
 */
function standardizeResponse(requestPayload, event) {
    var _a;
    var id = (_a = event.data.response) === null || _a === void 0 ? void 0 : _a.id;
    var requestPayloadResolved = getRequestPayloadFromBatch(requestPayload, id);
    if (id && requestPayloadResolved) {
        // Build a standardized response object
        var response = new JsonRpcResponse(requestPayloadResolved)
            .applyResult(event.data.response.result)
            .applyError(event.data.response.error);
        return { id: id, response: response };
    }
    return {};
}
var PayloadTransport = /** @class */ (function () {
    /**
     * Create an instance of `PayloadTransport`
     *
     * @param overlay - The `IframeController` context to which the event will be
     * posted.
     * @param endpoint - The URL for the relevant iframe context.
     * @param encodedQueryParams - The unique, encoded query parameters for the
     * relevant iframe context.
     */
    function PayloadTransport(endpoint, encodedQueryParams) {
        this.endpoint = endpoint;
        this.encodedQueryParams = encodedQueryParams;
        this.messageHandlers = new Set();
        this.init();
    }
    PayloadTransport.prototype.post = function (overlay, msgType, payload) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, createAutoCatchingPromise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                        var batchData, batchIds, acknowledgeResponse, removeResponseListener;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, overlay.ready];
                                case 1:
                                    _a.sent();
                                    batchData = [];
                                    batchIds = Array.isArray(payload) ? payload.map(function (p) { return p.id; }) : [];
                                    return [4 /*yield*/, overlay.postMessage({ msgType: msgType + "-" + this.encodedQueryParams, payload: payload })];
                                case 2:
                                    _a.sent();
                                    acknowledgeResponse = function (removeEventListener) { return function (event) {
                                        var _a = standardizeResponse(payload, event), id = _a.id, response = _a.response;
                                        if (id && response && Array.isArray(payload) && batchIds.includes(id)) {
                                            batchData.push(response);
                                            // For batch requests, we wait for all responses before resolving.
                                            if (batchData.length === payload.length) {
                                                removeEventListener();
                                                resolve(batchData);
                                            }
                                        }
                                        else if (id && response && !Array.isArray(payload) && id === payload.id) {
                                            removeEventListener();
                                            resolve(response);
                                        }
                                    }; };
                                    removeResponseListener = this.on(MagicIncomingWindowMessage.MAGIC_HANDLE_RESPONSE, acknowledgeResponse(function () { return removeResponseListener(); }));
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Listen for events received with the given `msgType`.
     *
     * @param msgType - The `msgType` encoded with the event data.
     * @param handler - A handler function to execute on each event received.
     * @return A `void` function to remove the attached event.
     */
    PayloadTransport.prototype.on = function (msgType, handler) {
        var _this = this;
        var boundHandler = handler.bind(window);
        // We cannot effectively cover this function because it never gets reference
        // by value. The functionality of this callback is tested within
        // `initMessageListener`.
        /* istanbul ignore next */
        var listener = function (event) {
            if (event.data.msgType === msgType + "-" + _this.encodedQueryParams)
                boundHandler(event);
        };
        this.messageHandlers.add(listener);
        return function () { return _this.messageHandlers.delete(listener); };
    };
    return PayloadTransport;
}());
export { PayloadTransport };
//# sourceMappingURL=payload-transport.js.map